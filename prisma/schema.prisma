generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role
  telp      String?
  name      String?
  photoUrl  String?
  gender    String?

  parentOf  Student[] @relation("ParentStudents") 
  CoachOf   Student[] @relation("CoachStudents") 
  @@map("users")
}

model Student {
  id           Int      @id @default(autoincrement())
  name         String
  photoUrl     String?
  age          Int
  gender       Gender
  kategoriBMI  BMI
  level        String
  tanggalLahir DateTime
  tempatLahir  String

  coachId      Int?
  coach        User?     @relation("CoachStudents", fields: [coachId], references: [id])

  parentId     Int?
  parent       User?    @relation("ParentStudents", fields: [parentId], references: [id])

  achievement  Achievement[]
  attendance   Attendance[]
  grades       Grade[]

  @@map("students")
}

model Staff {
  id   Int    @id @default(autoincrement())
  name String
  role String

  @@map("staff")
}

model Coach {
  id       Int     @id @default(autoincrement())
  name     String
  photoUrl String?

  @@map("coaches")
}

model Achievement {
  id        Int      @id @default(autoincrement())
  title     String
  year      Int
  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  @@map("achievements")
}

model Grade {
  id        Int     @id @default(autoincrement())
  subject   String
  score     Float
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])

  @@map("grades")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])

  @@map("attendance")
}

enum Role {
  SUPER_ADMIN
  COACH
  USER
  GUEST
}

enum Gender {
  L
  P
}

enum BMI {
  NORMAL
  OVERWEIGHT
  UNDERWEIGHT
}
