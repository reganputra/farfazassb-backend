generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     Role
  telp     String?
  name     String?
  photoUrl String?
  gender   String?
  address  String?
  status   Boolean?

  parentOf Student[] @relation("ParentStudents")
  CoachOf  Student[] @relation("CoachStudents")
  TestOf   Test[]    @relation("CoachTests")
  grades   Grade[]  
  createAt DateTime @default(now())

  @@map("users")
}

model Student {
  id           Int      @id @default(autoincrement())
  name         String
  photoUrl     String?
  kk           String?
  koperasi     String?
  akta         String?
  bpjs         String?
  age          Int
  gender       Gender
  kategoriBMI  BMI
  level        String
  tanggalLahir DateTime
  tempatLahir  String

  coachId Int?
  coach   User? @relation("CoachStudents", fields: [coachId], references: [id])

  parentId Int?
  parent   User? @relation("ParentStudents", fields: [parentId], references: [id])

  achievement Achievement[]
  attendance  Attendance[]
  grades      Grade[]

  @@map("students")
}

model Staff {
  id   Int    @id @default(autoincrement())
  name String
  role String

  @@map("staff")
}

model Coach {
  id       Int     @id @default(autoincrement())
  name     String
  photoUrl String?

  @@map("coaches")
}

model Achievement {
  id        Int      @id @default(autoincrement())
  title     String
  studentId Int?
  date      DateTime
  desc      String
  level     String
  place     Int
  event     String

  student   Student? @relation(fields: [studentId], references: [id])

  @@map("achievements")
}

model Grade {
  id        Int      @id @default(autoincrement())
  date      DateTime // tanggal tes
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  coach     User     @relation(fields: [coachId], references: [id])
  coachId   Int

  test      Test?    @relation("TestGrades", fields: [testId], references: [id])
  testId    Int?

  // Antropometri
  tinggiBadan    Float
  beratBadan     Float
  bmi            Float
  kategoriBMI    BMI
  tinggiDuduk    Float
  panjangTungkai Float
  rentangLengan  Float

  // Fisiologi
  denyutNadiIstirahat Float
  saturasiOksigen     Float

  // Biomotor
  standingBoardJump Float
  kecepatan         Float
  dayaTahan         Float

  // Keterampilan (skala 1–4)
  controllingKanan Int
  controllingKiri  Int
  dribbling        Int
  longpassKanan    Int
  longpassKiri     Int
  shortpassKanan   Int
  shortpassKiri    Int
  shootingKanan    Int
  shootingKiri     Int

  // Psikologi (skala 1–4)
  disiplin    Int
  komitmen    Int
  percayaDiri Int

  injuryDetail String?
  comment      String?

  @@map("grades")
}

model Test {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime

  coachId   Int
  coach     User     @relation("CoachTests",fields: [coachId], references: [id])
  
  grades  Grade[]  @relation("TestGrades")


  @@map("tests")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id])

  @@map("attendance")
}

enum Role {
  SUPER_ADMIN
  COACH
  USER
  GUEST
}

enum Gender {
  L
  P
}

enum BMI {
  NORMAL
  OVERWEIGHT
  UNDERWEIGHT
}
